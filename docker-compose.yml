version: '3.9'
services:
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:3.4.6
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - finance

  redis-cache:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - finance

  kafka-broker:
    container_name: kafka-broker
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9093:9093"
      - "9092:9092"
    depends_on:
        - zookeeper
    environment:
        KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-broker:9092,OUTSIDE://localhost:9093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_BROKER_ID: 1
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - finance

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8099:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - finance

  finance-db:
    image: postgres:latest
    container_name: finance_global_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER:  ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - finance

  stock-db:
    image: postgres:latest
    container_name: stock-db
    environment:
      POSTGRES_DB: ${STOCK_DB_NAME}
      POSTGRES_USER: ${STOCK_DB_USER}
      POSTGRES_PASSWORD: ${STOCK_DB_PASSWORD}
    ports:
      - "5434:5432"
    networks:
      - finance

  reports-db:
    image: mongo:latest
    container_name: reports-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: reports-db
    networks:
      - finance

  db-auth:
    container_name: "db_a_tth"
    image: postgres:17
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${AUTH_DATASOURCE_NAME}
      POSTGRES_USER: ${AUTH_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_DATASOURCE_PASSWORD}
    networks:
      - main

  login-token-db:
    image: redis/redis-stack-server:7.0.6-RC6-x86_64
    container_name: ${LOGIN_TOKEN_DB_NAME}
    ports:
      - "6380:6380"
    volumes:
      - ./services/redis:/redis
    environment:
      - LOGIN_TOKEN_DB_PASSWORD=${LOGIN_TOKEN_DB_PASSWORD}
    command: [ "redis-server", "--requirepass", "${LOGIN_TOKEN_DB_PASSWORD}", "--tls-port", "6379", "--tls-cert-file", "/redis/certs/redis.crt", "--tls-key-file", "/redis/certs/redis.key", "--tls-ca-cert-file", "/redis/certs/redis.crt", "--tls-auth-clients", "no", "--port", "6380", "--loadmodule", "/redis/rejson.so" ]
    networks:
      - main

#  finance-module:
#    container_name: global-finance-module
#    build:
#      context: ./accounting
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    depends_on:
#      - finance-db
#    environment:
#      DB_URL: ${DB_URL}
#      DB_NAME: ${DB_NAME}
#      DB_USER: ${DB_USER}
#      DB_PASSWORD: ${DB_PASSWORD}
#      JWT_SECRET: ${JWT_SECRET}
#      JWT_EXPIRATION: ${JWT_EXPIRATION}
#      BROKER_HOST: ${BROKER_HOST}
#      CACHE_REDIS_HOST: ${CACHE_REDIS_HOST}
#      CACHE_REDIS_PORT: ${CACHE_REDIS_PORT}
#    networks:
#      - finance
#
#
#  finance-report:
#    container_name: global-finance-report
#    build:
#      context: ./finance-report
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8080"
#    depends_on:
#      - reports-db
#    environment:
#      URL_DB: mongodb://reports-db:27017/reports-db
#      JWT_SECRET: ${JWT_SECRET}
#      JWT_EXPIRATION: ${JWT_EXPIRATION}
#      BROKER_HOST: ${BROKER_HOST}
#    networks:
#      - finance
#
#
  authentication:
    container_name: authentication-module
    volumes:
      - ./services/redis/certs:/redis
    image: rabserkon/authentication:cfcf86b12e283f51b2489737f8cf2acf7d2a9a53
    ports:
      - "8079:8080"
    depends_on:
      - db-auth
      - login-token-db
    environment:
      DATASOURCE_URL: ${AUTH_DATASOURCE_URL}
      DATASOURCE_USERNAME: ${AUTH_DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${AUTH_DATASOURCE_PASSWORD}
      DATASOURCE_DRIVER: ${AUTH_DATASOURCE_DRIVER}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      LOGIN_TOKEN_DB_HOST: ${LOGIN_TOKEN_DB_HOST}
      LOGIN_TOKEN_DB_PORT: ${LOGIN_TOKEN_DB_PORT}
      LOGIN_TOKEN_DB_PASSWORD: ${LOGIN_TOKEN_DB_PASSWORD}
      BROKER_HOST: ${BROKER_HOST}
    networks:
      - main

networks:
  finance:
    driver: bridge
  main:
    driver: bridge

volumes:
  mongodb_data:
    driver: local